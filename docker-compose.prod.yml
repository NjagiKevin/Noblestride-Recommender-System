version: '3.8'

networks:
  noblestride-network:
    driver: bridge

volumes:
  pgdata-main:
  pgdata-airflow:
  pgdata-mlflow:
  redis-data:

services:
  # üóÑÔ∏è Main Application PostgreSQL Database
  noblestride-service-db:
    image: postgres:15
    container_name: noblestride_main_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata-main:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - noblestride-network
    restart: unless-stopped

  # üóÑÔ∏è Airflow PostgreSQL Database
  airflow-postgres:
    image: postgres:15
    container_name: airflow_postgres_db
    environment:
      POSTGRES_DB: ${AIRFLOW_DB_NAME}
      POSTGRES_USER: ${AIRFLOW_DB_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata-airflow:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - noblestride-network
    restart: unless-stopped

  # üóÑÔ∏è MLflow PostgreSQL Database
  mlflow-postgres:
    image: postgres:15
    container_name: mlflow_postgres_db
    environment:
      POSTGRES_DB: ${MLFLOW_DB_NAME}
      POSTGRES_USER: ${MLFLOW_DB_USER}
      POSTGRES_PASSWORD: ${MLFLOW_DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata-mlflow:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - noblestride-network
    restart: unless-stopped

  # üî¥ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - noblestride-network
    restart: unless-stopped

  # üìä MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    container_name: mlflow_server
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://${MLFLOW_DB_USER}:${MLFLOW_DB_PASSWORD}@mlflow-postgres:5432/${MLFLOW_DB_NAME}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - ./mlflow/artifacts:/mlflow/artifacts
    command: >
      bash -c "
        pip install mlflow psycopg2-binary &&
        mlflow server 
          --backend-store-uri postgresql://${MLFLOW_DB_USER}:${MLFLOW_DB_PASSWORD}@mlflow-postgres:5432/${MLFLOW_DB_NAME}
          --default-artifact-root /mlflow/artifacts
          --host 0.0.0.0
          --port 5000
      "
    depends_on:
      - mlflow-postgres
    networks:
      - noblestride-network
    restart: unless-stopped

  # üöÄ FastAPI Application
  api:
    build: .
    container_name: recommender_api
    ports:
      - "8010:8000"
    env_file:
      - .env.prod
    environment:
      - DB_HOST=${DB_HOST}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
    volumes:
      - ./app:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - noblestride-service-db
      - redis
      - mlflow
    networks:
      - noblestride-network
    restart: unless-stopped

  # ‚è∞ Airflow Scheduler
  airflow-scheduler:
    build:
      context: ./airflow-orchestrator
      dockerfile: Dockerfile.prod
    container_name: airflow_scheduler
    env_file:
      - .env.prod
    environment:
      - PYTHONUNBUFFERED=1
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-postgres:5432/${AIRFLOW_DB_NAME}
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${SECRET_KEY}
      - AIRFLOW_CONN_AIRFLOW_DB=postgresql://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-postgres:5432/${AIRFLOW_DB_NAME}
      - AIRFLOW_CONN_POSTGRES_DEFAULT=postgresql://${DB_USER}:${DB_PASSWORD}@noblestride-service-db:5432/${DB_NAME}
      - AIRFLOW_CONN_NOBLESTRIDE_POSTGRES=postgresql://${DB_USER}:${DB_PASSWORD}@noblestride-service-db:5432/${DB_NAME}
      - AIRFLOW__WEBSERVER__AUTHENTICATE=True
      - AIRFLOW__WEBSERVER__AUTH_BACKEND=airflow.auth.backends.password_auth
      - _AIRFLOW_WWW_USER_USERNAME=${_AIRFLOW_WWW_USER_USERNAME}
      - _AIRFLOW_WWW_USER_PASSWORD=${_AIRFLOW_WWW_USER_PASSWORD}
    volumes:
      - ./airflow-orchestrator/dags:/opt/airflow/dags
      - ./airflow-orchestrator/plugins:/opt/airflow/plugins
      - ./airflow-orchestrator/logs:/opt/airflow/logs
    command: airflow scheduler
    depends_on:
      - airflow-postgres
      - redis
    networks:
      - noblestride-network
    restart: unless-stopped

  # üåê Airflow Webserver
  airflow-webserver:
    build:
      context: ./airflow-orchestrator
      dockerfile: Dockerfile.prod
    container_name: airflow_webserver
    ports:
      - "8090:8080"
    env_file:
      - .env.prod
    environment:
      - PYTHONUNBUFFERED=1
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-postgres:5432/${AIRFLOW_DB_NAME}
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${SECRET_KEY}
      - AIRFLOW_CONN_AIRFLOW_DB=postgresql://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-postgres:5432/${AIRFLOW_DB_NAME}
      - AIRFLOW_CONN_POSTGRES_DEFAULT=postgresql://${DB_USER}:${DB_PASSWORD}@noblestride-service-db:5432/${DB_NAME}
      - AIRFLOW_CONN_NOBLESTRIDE_POSTGRES=postgresql://${DB_USER}:${DB_PASSWORD}@noblestride-service-db:5432/${DB_NAME}
      - AIRFLOW__WEBSERVER__AUTHENTICATE=True
      - AIRFLOW__WEBSERVER__AUTH_BACKEND=airflow.auth.backends.password_auth
      - _AIRFLOW_WWW_USER_USERNAME=${_AIRFLOW_WWW_USER_USERNAME}
      - _AIRFLOW_WWW_USER_PASSWORD=${_AIRFLOW_WWW_USER_PASSWORD}
    volumes:
      - ./airflow-orchestrator/dags:/opt/airflow/dags
      - ./airflow-orchestrator/plugins:/opt/airflow/plugins
      - ./airflow-orchestrator/logs:/opt/airflow/logs
    command: airflow webserver
    depends_on:
      - airflow-scheduler
      - airflow-postgres
      - redis
    networks:
      - noblestride-network
    restart: unless-stopped

  # üå∏ Flower (Celery Monitoring) - Optional
  flower:
    build:
      context: ./airflow-orchestrator
      dockerfile: Dockerfile.prod
    container_name: airflow_flower
    ports:
      - "5555:5555"
    env_file:
      - .env.prod
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-postgres:5432/${AIRFLOW_DB_NAME}
    command: airflow celery flower
    depends_on:
      - redis
      - airflow-scheduler
    networks:
      - noblestride-network
    restart: unless-stopped
