version: '3.8'

networks:
  noblestride-network:
    driver: bridge

volumes:
  mlflow-artifacts:
  airflow-logs:
  redis-data:

services:
  # üî¥ Redis Cache (Port 6380 to avoid conflicts)
  redis:
    image: redis:7-alpine
    container_name: recommender_redis
    ports:
      - "6380:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_pass}
    volumes:
      - redis-data:/data
    networks:
      - noblestride-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_pass}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # üìä MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    container_name: mlflow_server
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://${MLFLOW_DB_USER}:${MLFLOW_DB_PASSWORD}@${MLFLOW_DB_HOST}:${MLFLOW_DB_PORT}/${MLFLOW_DB_NAME}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow-artifacts:/mlflow/artifacts
    command: >
      bash -c "
        pip install --no-cache-dir mlflow==2.8.1 psycopg2-binary &&
        mlflow server 
          --backend-store-uri postgresql://${MLFLOW_DB_USER}:${MLFLOW_DB_PASSWORD}@${MLFLOW_DB_HOST}:${MLFLOW_DB_PORT}/${MLFLOW_DB_NAME}
          --default-artifact-root /mlflow/artifacts
          --host 0.0.0.0
          --port 5000
      "
    networks:
      - noblestride-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üöÄ FastAPI Application
  api:
    build: 
      context: .
      dockerfile: dockerfile
    container_name: recommender_api
    ports:
      - "${API_PORT:-8010}:8000"
    environment:
      - DATABASE_URL=postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_pass}
      - APP_NAME=${APP_NAME:-RecommenderService}
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
    depends_on:
      redis:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    networks:
      - noblestride-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ‚è∞ Airflow Scheduler
  airflow-scheduler:
    build:
      context: ./airflow-orchestrator
      dockerfile: Dockerfile.prod
    container_name: airflow_scheduler
    environment:
      - PYTHONUNBUFFERED=1
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@${AIRFLOW_DB_HOST}:${AIRFLOW_DB_PORT}/${AIRFLOW_DB_NAME}
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${SECRET_KEY}
      - AIRFLOW_CONN_NOBLESTRIDE_POSTGRES=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - AIRFLOW__WEBSERVER__AUTHENTICATE=True
      - AIRFLOW__WEBSERVER__AUTH_BACKEND=airflow.auth.backends.password_auth
      - _AIRFLOW_WWW_USER_USERNAME=${AIRFLOW_WEB_USER:-admin}
      - _AIRFLOW_WWW_USER_PASSWORD=${AIRFLOW_WEB_PASSWORD}
    volumes:
      - ./airflow-orchestrator/dags:/opt/airflow/dags:ro
      - ./airflow-orchestrator/plugins:/opt/airflow/plugins:ro
      - airflow-logs:/opt/airflow/logs
    command: airflow scheduler
    depends_on:
      - redis
    networks:
      - noblestride-network
    restart: unless-stopped

  # üåê Airflow Webserver
  airflow-webserver:
    build:
      context: ./airflow-orchestrator
      dockerfile: Dockerfile.prod
    container_name: airflow_webserver
    ports:
      - "${AIRFLOW_PORT:-8090}:8080"
    environment:
      - PYTHONUNBUFFERED=1
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@${AIRFLOW_DB_HOST}:${AIRFLOW_DB_PORT}/${AIRFLOW_DB_NAME}
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${SECRET_KEY}
      - AIRFLOW_CONN_NOBLESTRIDE_POSTGRES=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - AIRFLOW__WEBSERVER__AUTHENTICATE=True
      - AIRFLOW__WEBSERVER__AUTH_BACKEND=airflow.auth.backends.password_auth
      - _AIRFLOW_WWW_USER_USERNAME=${AIRFLOW_WEB_USER:-admin}
      - _AIRFLOW_WWW_USER_PASSWORD=${AIRFLOW_WEB_PASSWORD}
    volumes:
      - ./airflow-orchestrator/dags:/opt/airflow/dags:ro
      - ./airflow-orchestrator/plugins:/opt/airflow/plugins:ro
      - airflow-logs:/opt/airflow/logs
    command: airflow webserver
    depends_on:
      - airflow-scheduler
      - redis
    networks:
      - noblestride-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3