services:
  # üóÑÔ∏è Airflow Database
  airflow-db:
    image: postgres:15-alpine
    container_name: airflow_db
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow_pass
    volumes:
      - postgres_airflow:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üóÑÔ∏è MLflow Database
  mlflow-db:
    image: postgres:15-alpine
    container_name: mlflow_db
    environment:
      POSTGRES_DB: mlflow
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow_pass
    volumes:
      - postgres_mlflow:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow -d mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üî¥ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6380:6379"
    command: redis-server --requirepass redis_pass
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_pass", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # üìä MLflow Server
  mlflow:
    image: python:3.11-slim
    container_name: mlflow_server
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:mlflow_pass@mlflow-db:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    command: >
      bash -c "
        pip install --no-cache-dir mlflow==2.8.1 psycopg2-binary &&
        mlflow server 
          --backend-store-uri postgresql://mlflow:mlflow_pass@mlflow-db:5432/mlflow
          --default-artifact-root /mlflow/artifacts
          --host 0.0.0.0
          --port 5000
      "
    depends_on:
      mlflow-db:
        condition: service_healthy
    restart: unless-stopped

  # üöÄ FastAPI App
  api:
    build: .
    container_name: recommender_api
    ports:
      - "8010:8000"
    environment:
      # Connect to your existing main database container
      - DATABASE_URL=postgresql+psycopg2://${DB_USER:-postgres}:${DB_PASSWORD:-password}@${DB_HOST:-noblestride-service-db}:5432/${DB_NAME:-noblestride}
      - DB_HOST=${DB_HOST:-noblestride-service-db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-noblestride}
      - DB_PORT=5432
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_pass
      - APP_NAME=RecommenderService
      - APP_VERSION=1.0.0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      redis:
        condition: service_healthy
      mlflow:
        condition: service_started
    restart: unless-stopped

  # ‚öôÔ∏è Airflow Init (runs once)
  airflow-init:
    build: ./airflow-orchestrator
    container_name: airflow_init
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow_pass@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=ZmDfcTF7_60GrrY167zsiPd67pEvs0aGqv7dRr-5y-g=
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin123
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@noblestride.com --password admin123 || true &&
        echo 'Airflow initialized'
      "
    depends_on:
      airflow-db:
        condition: service_healthy
    restart: "no"

  # ‚è∞ Airflow Scheduler
  airflow-scheduler:
    build: ./airflow-orchestrator
    container_name: airflow_scheduler
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow_pass@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=ZmDfcTF7_60GrrY167zsiPd67pEvs0aGqv7dRr-5y-g=
      - AIRFLOW__WEBSERVER__SECRET_KEY=noblestride-secret-key-2024
      - AIRFLOW_CONN_NOBLESTRIDE_POSTGRES=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@${DB_HOST:-noblestride-service-db}:5432/${DB_NAME:-noblestride}
    volumes:
      - ./airflow-orchestrator/dags:/opt/airflow/dags:ro
      - ./airflow-orchestrator/plugins:/opt/airflow/plugins:ro
      - airflow_logs:/opt/airflow/logs
    command: airflow scheduler
    depends_on:
      - airflow-init
      - redis
    restart: unless-stopped

  # üåê Airflow Web UI
  airflow-webserver:
    build: ./airflow-orchestrator
    container_name: airflow_webserver
    ports:
      - "8090:8080"
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow_pass@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=ZmDfcTF7_60GrrY167zsiPd67pEvs0aGqv7dRr-5y-g=
      - AIRFLOW__WEBSERVER__SECRET_KEY=noblestride-secret-key-2024
      - AIRFLOW_CONN_NOBLESTRIDE_POSTGRES=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@${DB_HOST:-noblestride-service-db}:5432/${DB_NAME:-noblestride}
    volumes:
      - ./airflow-orchestrator/dags:/opt/airflow/dags:ro
      - ./airflow-orchestrator/plugins:/opt/airflow/plugins:ro
      - airflow_logs:/opt/airflow/logs
    command: airflow webserver
    depends_on:
      - airflow-scheduler
    restart: unless-stopped

volumes:
  postgres_airflow:
  postgres_mlflow:
  redis_data:
  mlflow_artifacts:
  airflow_logs:

networks:
  default:
    name: noblestride-network
    external: true
